/* osgEarth
 * Copyright 2025 Pelican Mapping
 * MIT License
 */
#pragma once

#include <osgEarth/Common>
#include <osgEarth/Skins>
#include <osgEarth/InstanceResource>
#include <osgEarth/ResourceLibrary>
#include <osgEarth/Containers>
#include <osgEarth/Threading>

namespace osgEarth { namespace Util
{
    /**
     * Caches the runtime objects created by resources, so we can avoid creating them
     * each time they are referenced.
     *
     * This object is thread-safe.
     */
    class OSGEARTH_EXPORT ResourceCache : public osg::Referenced
    {
    public:
        //! Constructs a new resource cache.
        ResourceCache() = default;

        //! Fetches the StateSet implementation corresponding to a Skin.
        //! @param skin   Skin resource for which to get or create a state set.
        //! @param output Result goes here.
        bool getOrCreateStateSet(SkinResource* skin, osg::ref_ptr<osg::StateSet>& output, const osgDB::Options* readOptions);

        /**
         * Gets a node corresponding to an instance resource.
         * @param skin   Instance resource for which to get or create a Node.
         * @param output Result goes here.
         */
        bool getOrCreateInstanceNode( InstanceResource* instance, osg::ref_ptr<osg::Node>& output, const osgDB::Options* readOptions );
        bool cloneOrCreateInstanceNode( InstanceResource* instance, osg::ref_ptr<osg::Node>& output, const osgDB::Options* readOptions );

        /**
         * Fetches the StateSet implementation for an entire ResourceLibrary.  This will contain a Texture2DArray with all of the skins merged into it.
         * @param library    The library 
         * @param output     Result goes here. 
         */
        bool getOrCreateStateSet( ResourceLibrary* library,  osg::ref_ptr<osg::StateSet>& output, const osgDB::Options* readOptions );

        bool getOrCreateLineTexture(const URI& uri, osg::ref_ptr<osg::Texture>& output, const osgDB::Options* readOptions);

    protected:

        using SkinCache = LRUCache<std::string, osg::ref_ptr<osg::StateSet>>;
        SkinCache _skinCache{ 128u };

        using TextureCache = LRUCache<std::string, osg::ref_ptr<osg::Texture>>;
        TextureCache _texCache{ 128u };

        using InstanceCache = LRUCache<std::string, osg::ref_ptr<osg::Node>>;
        InstanceCache _instanceCache{ 128u };
    };
} } 
